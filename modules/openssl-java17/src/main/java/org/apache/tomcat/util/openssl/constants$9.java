/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$9 {

    static final FunctionDescriptor i2d_X509$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle i2d_X509$MH = RuntimeHelper.downcallHandle(
        openssl_h.LIBRARIES, "i2d_X509",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$9.i2d_X509$FUNC, false
    );
    static final FunctionDescriptor X509_get_ext_by_NID$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final MethodHandle X509_get_ext_by_NID$MH = RuntimeHelper.downcallHandle(
        openssl_h.LIBRARIES, "X509_get_ext_by_NID",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        constants$9.X509_get_ext_by_NID$FUNC, false
    );
    static final FunctionDescriptor X509_get_ext$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle X509_get_ext$MH = RuntimeHelper.downcallHandle(
        openssl_h.LIBRARIES, "X509_get_ext",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        constants$9.X509_get_ext$FUNC, false
    );
    static final FunctionDescriptor X509_EXTENSION_get_data$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle X509_EXTENSION_get_data$MH = RuntimeHelper.downcallHandle(
        openssl_h.LIBRARIES, "X509_EXTENSION_get_data",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$9.X509_EXTENSION_get_data$FUNC, false
    );
    static final FunctionDescriptor PEM_read_bio_X509_AUX$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle PEM_read_bio_X509_AUX$MH = RuntimeHelper.downcallHandle(
        openssl_h.LIBRARIES, "PEM_read_bio_X509_AUX",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$9.PEM_read_bio_X509_AUX$FUNC, false
    );
    static final FunctionDescriptor PEM_read_bio_ECPKParameters$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle PEM_read_bio_ECPKParameters$MH = RuntimeHelper.downcallHandle(
        openssl_h.LIBRARIES, "PEM_read_bio_ECPKParameters",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$9.PEM_read_bio_ECPKParameters$FUNC, false
    );
}


