/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$18 {

    static final FunctionDescriptor TLS_server_method$FUNC = FunctionDescriptor.of(C_POINTER);
    static final MethodHandle TLS_server_method$MH = RuntimeHelper.downcallHandle(
        openssl_h.LIBRARIES, "TLS_server_method",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        constants$18.TLS_server_method$FUNC, false
    );
    static final FunctionDescriptor SSL_get_ciphers$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle SSL_get_ciphers$MH = RuntimeHelper.downcallHandle(
        openssl_h.LIBRARIES, "SSL_get_ciphers",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$18.SSL_get_ciphers$FUNC, false
    );
    static final FunctionDescriptor SSL_CTX_get_ciphers$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle SSL_CTX_get_ciphers$MH = RuntimeHelper.downcallHandle(
        openssl_h.LIBRARIES, "SSL_CTX_get_ciphers",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$18.SSL_CTX_get_ciphers$FUNC, false
    );
    static final FunctionDescriptor SSL_do_handshake$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle SSL_do_handshake$MH = RuntimeHelper.downcallHandle(
        openssl_h.LIBRARIES, "SSL_do_handshake",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$18.SSL_do_handshake$FUNC, false
    );
    static final FunctionDescriptor SSL_renegotiate$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle SSL_renegotiate$MH = RuntimeHelper.downcallHandle(
        openssl_h.LIBRARIES, "SSL_renegotiate",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$18.SSL_renegotiate$FUNC, false
    );
    static final FunctionDescriptor SSL_renegotiate_pending$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle SSL_renegotiate_pending$MH = RuntimeHelper.downcallHandle(
        openssl_h.LIBRARIES, "SSL_renegotiate_pending",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$18.SSL_renegotiate_pending$FUNC, false
    );
}


